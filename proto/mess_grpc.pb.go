// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mess.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServidorRegionalClient is the client API for ServidorRegional service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServidorRegionalClient interface {
	CuposDisponibles(ctx context.Context, in *Cupo, opts ...grpc.CallOption) (*Recepcion, error)
	CuposRechazados(ctx context.Context, in *Rechazado, opts ...grpc.CallOption) (*Recepcion, error)
}

type servidorRegionalClient struct {
	cc grpc.ClientConnInterface
}

func NewServidorRegionalClient(cc grpc.ClientConnInterface) ServidorRegionalClient {
	return &servidorRegionalClient{cc}
}

func (c *servidorRegionalClient) CuposDisponibles(ctx context.Context, in *Cupo, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, "/grpc.ServidorRegional/CuposDisponibles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servidorRegionalClient) CuposRechazados(ctx context.Context, in *Rechazado, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, "/grpc.ServidorRegional/CuposRechazados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServidorRegionalServer is the server API for ServidorRegional service.
// All implementations must embed UnimplementedServidorRegionalServer
// for forward compatibility
type ServidorRegionalServer interface {
	CuposDisponibles(context.Context, *Cupo) (*Recepcion, error)
	CuposRechazados(context.Context, *Rechazado) (*Recepcion, error)
	mustEmbedUnimplementedServidorRegionalServer()
}

// UnimplementedServidorRegionalServer must be embedded to have forward compatible implementations.
type UnimplementedServidorRegionalServer struct {
}

func (UnimplementedServidorRegionalServer) CuposDisponibles(context.Context, *Cupo) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CuposDisponibles not implemented")
}
func (UnimplementedServidorRegionalServer) CuposRechazados(context.Context, *Rechazado) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CuposRechazados not implemented")
}
func (UnimplementedServidorRegionalServer) mustEmbedUnimplementedServidorRegionalServer() {}

// UnsafeServidorRegionalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServidorRegionalServer will
// result in compilation errors.
type UnsafeServidorRegionalServer interface {
	mustEmbedUnimplementedServidorRegionalServer()
}

func RegisterServidorRegionalServer(s grpc.ServiceRegistrar, srv ServidorRegionalServer) {
	s.RegisterService(&ServidorRegional_ServiceDesc, srv)
}

func _ServidorRegional_CuposDisponibles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cupo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorRegionalServer).CuposDisponibles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorRegional/CuposDisponibles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorRegionalServer).CuposDisponibles(ctx, req.(*Cupo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServidorRegional_CuposRechazados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rechazado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServidorRegionalServer).CuposRechazados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ServidorRegional/CuposRechazados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServidorRegionalServer).CuposRechazados(ctx, req.(*Rechazado))
	}
	return interceptor(ctx, in, info, handler)
}

// ServidorRegional_ServiceDesc is the grpc.ServiceDesc for ServidorRegional service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServidorRegional_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ServidorRegional",
	HandlerType: (*ServidorRegionalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CuposDisponibles",
			Handler:    _ServidorRegional_CuposDisponibles_Handler,
		},
		{
			MethodName: "CuposRechazados",
			Handler:    _ServidorRegional_CuposRechazados_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mess.proto",
}
